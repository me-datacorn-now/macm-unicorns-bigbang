Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"  # Use the latest version of Ubuntu 22.04 (Jammy Jellyfish)
  config.vm.hostname = ENV['VM_NAME']
  
  # Set VM resources
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "24576"  # 24GB RAM
    vb.cpus = 8          # 8 CPUs
    vb.name = ENV['VM_NAME']
    vb.gui = true

    # Set the graphics controller
    # login screen will not display properly unless graphics controller is VMSVGA
    vb.customize ["modifyvm", :id, "--graphicscontroller", "VMSVGA"]    

    # Set vbguest plugin to auto update Guest Additions
    config.vbguest.auto_update = true    

    # Set video memory to 64 MB
    vb.customize ["modifyvm", :id, "--vram", "64"]    

    config.vm.provision "file", source: "./env", destination: "/tmp/env"
  end
  
  # Give the VM a specific name
  config.vm.define "big-bang-vm" do |bigbang|
    # Shell provisioner to execute commands
    bigbang.vm.provision "shell", inline: <<-SHELL

      export BIGBANG_USER=bigbang
      export BIGBANG_PASSWORD=${BIGBANG_USER}

      sudo adduser --disabled-password --gecos "" ${BIGBANG_USER}
      echo "${BIGBANG_USER}:${BIGBANG_USER}" | sudo chpasswd 2>/dev/null
      sudo usermod -aG sudo ${BIGBANG_PASSWORD}

      mkdir -p /home/${BIGBANG_USER}/git
      
      cd /home/${BIGBANG_USER}/git/
      git clone https://github.com/me-datacorn-now/macm-unicorns-bigbang.git
      git clone https://repo1.dso.mil/big-bang/bigbang.git
      git logs | head
      git checkout tags/$(grep 'tag:' base/gitrepository.yaml | awk '{print $2}')      
      git logs | head

      sudo mv /tmp/env /home/bigbang/git/

      sudo chown -R ${BIGBANG_USER}:${BIGBANG_USER} /home/${BIGBANG_USER}

      # install 1password
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
      sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
      curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
      sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
      sudo apt update -y
      sudo apt install -y 1password

      # install vscodium
      wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
      | gpg --dearmor \
      | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg

      echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] https://download.vscodium.com/debs vscodium main' \
      | sudo tee /etc/apt/sources.list.d/vscodium.list

      sudo apt update && sudo apt install -y codium      

      # Update the system and install necessary packages
      # sudo apt-get update -y
      sudo apt-get upgrade -y
      sudo apt-get install -y docker.io
      sudo apt install -y ubuntu-desktop
      # Clean up
      sudo apt-get autoremove -y
      sudo apt-get clean      

      # Install k3d
      curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash

      # Install Helm
      curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # install kubectl
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl
      sudo mv kubectl /usr/local/bin/

      # install k9s
      wget https://github.com/derailed/k9s/releases/download/v0.30.8/k9s_linux_amd64.deb
      sudo apt -y install -f ./k9s_linux_amd64.deb
      rm k9s_linux_amd64.deb

      # Needed for ECK to run correctly without OOM errors
      echo 'vm.max_map_count=524288' | sudo tee -a /etc/sysctl.d/vm-max_map_count.conf
      # Alternatively can use (not persistent after restart):
      # sudo sysctl -w vm.max_map_count=524288

      # Needed by Sonarqube
      echo 'fs.file-max=131072' | sudo tee -a /etc/sysctl.d/fs-file-max.conf
      # Alternatively can use (not persistent after restart):  
      # sudo sysctl -w fs.file-max=131072

      # Also Needed by Sonarqube
      ulimit -n 131072
      ulimit -u 8192

      # Load updated configuration
      sudo sysctl --load --system

      # Preload kernel modules, required by istio-init running on SELinux enforcing instances
      sudo modprobe xt_REDIRECT
      sudo modprobe xt_owner
      sudo modprobe xt_statistic

      # Persist kernel modules settings after reboots
      printf "xt_REDIRECT\nxt_owner\nxt_statistic\n" | sudo tee -a /etc/modules

      # Kubernetes requires swap disabled
      # Turn off all swap devices and files (won't last reboot)
      sudo swapoff -a

      # For swap to stay off, you can remove any references found via
      # cat /proc/swaps
      # cat /etc/fstab

      # sudo useradd -m -p $(openssl passwd -1 password) bigbang
      sudo usermod -aG docker bigbang
      
      sudo shutdown now

    SHELL
  end
end
